import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Link from "next/link";
import React from "react";


const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
/*
1. app 目录必须包含根布局，也就是 app/layout.js 这个文件是必需的。
根布局必须包含 html 和 body标签，其他布局不能包含这些标签。如果你要更改这些标
2. 可以使用路由组创建多个根布局。
3. 默认根布局是服务端组件，且不能设置为客户端组件。
*/
// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }

// parallel routes
/*
平行路由 每个插槽都可以用自己独立的状态和导航，每个插槽相当于一个小型应用，
特点1: 使用平行路由可以将单个布局拆分成不同的多个插槽，使代码更易于管理，
特点2: 可以在不同的插槽中定义自己的加载状态和错误状态，
特点3: 每个插槽有自己独立的导航和状态管理
*/
export default function Layout({
  children,
  team,
  analytics,
  modal
}: {
  children: React.ReactNode
  analytics: React.ReactNode
  team: React.ReactNode
  modal: React.ReactNode
}) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/* <Link href="/visitors">visitors</Link> */}
        {/* {isLogin ? team : analytics} */}
        {/* {team}
        {analytics} */}
        {children}
        {modal}
      </body>
    </html>
  )
}
